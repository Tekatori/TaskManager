@using TaskManager.Models
@model TaskManager.DAL.ViewModel.CalendarEventViewModel
@{
	ViewData["Title"] = "Lịch công việc";
	Layout = "~/Views/Shared/_Layout.cshtml";


	var lstProject = ViewBag.ListProject as List<TaskManager.Models.Project>;
	if (lstProject == null)
	{
		lstProject = new List<TaskManager.Models.Project>();
	}
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
<link href="~/css/calendar.css" rel="stylesheet" />

<div class="row">
	<div class="col-lg-12">
		<div class="card">
			<div class="card-body">
				<div class="d-flex flex-wrap align-items-center justify-content-between breadcrumb-content">
					<h5 class="calendar-title"> <i class="ri-calendar-line me-2"></i> Lịch Công Việc</h5>
					<h3 class="m-0" id="calendarMonthYear"></h3>
					<div class="d-flex align-items-center">
			
						<div class="dropdown dropdown-project mr-3">
							<div class="dropdown-toggle" id="dropdownMenuButton03" data-toggle="dropdown">
								<div class="btn bg-body">
									<span class="h6" id="selectedProject"><i class="bi bi-layers mr-2"></i>Tất cả dự án</span>
									<i class="ri-arrow-down-s-line ml-2 mr-0"></i>
								</div>
							</div>
							<div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton03">
								<a class="dropdown-item project-option active" data-id="0" data-name="Tất cả dự án">
									<i class="bi bi-layers mr-2"></i> Tất cả dự án
								</a>
								@foreach (var project in lstProject)
								{
									<a class="dropdown-item project-option" data-id="@project.Id" data-name="@project.Name">
										<i class="bi bi-folder mr-2"></i> @project.Name
									</a>
								}
							</div>
						</div>

						<div class="calendar-view-modes btn-group">

							<button class="btn btn-outline-secondary" id="btnPrevious">
								<i class="bi bi-chevron-left mr-2"></i> Tháng trước
							</button>
							<button class="btn btn-outline-secondary" id="btnToday">
								<i class="bi bi-calendar-day mr-2"></i> Tháng này
							</button>
							<button class="btn btn-outline-secondary" id="btnNext">
								<i class="bi bi-chevron-right mr-2"></i> Tháng sau
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="calendar-wrapper">
	@Html.Partial("_FilterCalendar", Model)	
</div>

<div class="calendar-status-legend">
	<div class="status-item">
		<span class="status-color calendar-event-new"></span>
		<span class="status-text">@CommonEnums.GetDescription(CommonEnums.TaskStatus.New)</span>
	</div>
	<div class="status-item">
		<span class="status-color calendar-event-process"></span>
		<span class="status-text">@CommonEnums.GetDescription(CommonEnums.TaskStatus.InProgress)</span>
	</div>
	<div class="status-item">
		<span class="status-color calendar-event-done"></span>
		<span class="status-text">@CommonEnums.GetDescription(CommonEnums.TaskStatus.Completed)</span>
	</div>
</div>
<div class="status-note" style="text-align:center">
	<p>Click vào tên công việc để cập nhật trạng thái</p>
</div>

<div class="modal fade bd-example-modal-lg" role="dialog" aria-modal="true" id="edit-task-modal">
	<div class="modal-dialog modal-dialog-centered modal-lg" role="document">
		<form id="editTaskForm">
			<div class="modal-content">
				<div class="modal-header d-block text-center pb-3 border-bttom">
					<h3 class="modal-title" id="editTaskModalLabel">✏️ Cập nhật trạng thái</h3>
				</div>
				<div class="modal-body">

					<div class="row">
						<div class="col-lg-12">
							<input type="hidden" id="editId" name="Id" />
						</div>

						<div class="col-lg-12">
							<label for="editStatus" class="h5">Trạng thái</label>
							<div class="dropdown bootstrap-select form-control">
								<select id="editStatus" name="Status" class="form-control" data-style="py-0">

									@foreach (var status in Enum.GetValues(typeof(CommonEnums.TaskStatus)).Cast<CommonEnums.TaskStatus>())
									{
										if (status != CommonEnums.TaskStatus.NotCompleted && status != CommonEnums.TaskStatus.All)
										{
											<option value="@((int)status)" @(status == CommonEnums.TaskStatus.InProgress ? "selected" : "")>
												@CommonEnums.GetDescription(status)
											</option>
										}
									}
								</select>
							</div>
						</div>

						<div class="col-lg-12">
							<div class="form-group mb-3">
								<label for="editNotes" class="h5">Ghi chú *</label>
								<textarea class="form-control" id="editNotes" name="Notes" rows="2" placeholder="Nhập ghi chú cập nhật" required
										  oninvalid="this.setCustomValidity('Vui lòng nhập ghi chú cập nhật')"
										  oninput="this.setCustomValidity('')"></textarea>
							</div>
						</div>

						<div class="col-lg-12">
							<div class="d-flex flex-wrap align-items-ceter justify-content-center mt-4">
								<button type="submit" class="btn btn-primary mr-3"><i class="fas fa-save"></i>Lưu</button>
								<button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="bi bi-x-circle"></i>Đóng</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</form>
	</div>
</div>


@section Scripts {
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			const btnToday = document.getElementById('btnToday');
			const btnPrevious = document.getElementById('btnPrevious');
			const btnNext = document.getElementById('btnNext');
			const calendarMonthYear = document.getElementById('calendarMonthYear');
			const selectedProjectElement = document.getElementById('selectedProject');
			let currentDate = new Date(); 

			function updateCalendarMonthYear() {
				const monthNames = ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6",
									"Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"];
				const monthYear = monthNames[currentDate.getMonth()] + " " + currentDate.getFullYear();
				calendarMonthYear.textContent = monthYear;
			}

			function loadCalendarData(projectId = null) {  
				const month = currentDate.getMonth() + 1; 
				const year = currentDate.getFullYear(); 

				fetch(`/Task/GetCalendarEventsByMonth?month=${month}&year=${year}&idProject=${projectId}`)
					.then(response => response.text())
					.then(html => {
						const wrapper = document.querySelector('.calendar-wrapper');
						const parser = new DOMParser();
						const newDoc = parser.parseFromString(html, 'text/html');
						const newGrid = newDoc.querySelector('.calendar-grid');
						const oldGrid = wrapper.querySelector('.calendar-grid');

						if (newGrid && oldGrid) {
							oldGrid.replaceWith(newGrid); 
						}
					})
					.catch(error => console.error('Error loading calendar data:', error));
			}


			btnToday.addEventListener('click', function () {
				currentDate = new Date(); 
				updateCalendarMonthYear();
				loadCalendarData(); 
			});


			btnPrevious.addEventListener('click', function () {
				currentDate.setDate(1);
				currentDate.setMonth(currentDate.getMonth() - 1); 
				updateCalendarMonthYear();
				loadCalendarData(); 
			});


			btnNext.addEventListener('click', function () {
				currentDate.setDate(1);
				currentDate.setMonth(currentDate.getMonth() + 1);
				updateCalendarMonthYear();
				loadCalendarData(); 
			});


			document.querySelectorAll('.project-option').forEach(function (option) {
				option.addEventListener('click', function () {
					const projectId = this.getAttribute('data-id');
					selectedProjectElement.innerHTML = '<i class="bi bi-folder mr-2"></i>' + this.getAttribute('data-name');
					loadCalendarData(projectId === "0" ? null : projectId);
				});
			});


			updateCalendarMonthYear();
			loadCalendarData(); 
		});


	</script>
	<script>
		function setFullTitle(title) {
			document.getElementById('modalFullTitle').innerText = title;
		}

		$(document).ready(function() {
			$('.project-option').on('click', function() {
				var projectId = $(this).data('id');
				var projectName = $(this).data('name');

				if (projectId == 0) {
					$('#selectedProject').html('<i class="bi bi-layers mr-2"></i>' + projectName);  
				} else {
					$('#selectedProject').html('<i class="bi bi-folder mr-2"></i>' + projectName); 
				}

				$('#dropdownMenuButton03').dropdown('toggle');
			});


			$('#editTaskForm').submit(function (e) {
				e.preventDefault();
				var notes = $('#editNotes').val().trim();
				var status = $('#editStatus').val();
				if (!notes) {
					showAlert('Vui lòng ghi chú cập nhật.', 'info');
					return;
				}
				if (!status) {
					$('#editStatus').val(1).selectpicker('refresh');
				}

				var data = $(this).serialize();

				$.post('/Task/EditWithId', data, function (res) {
					if (res.success) {
						const taskId = res.data.Id;
						const newStatus = res.data.Status;

						const taskElement = document.querySelector(`.calendar-event[data-id="${taskId}"]`);
						if (taskElement) {
							taskElement.classList.remove('calendar-event-new', 'calendar-event-process', 'calendar-event-done');
							switch (newStatus) {
								case 0:
									taskElement.classList.add('calendar-event-new');
									break;
								case 1:
									taskElement.classList.add('calendar-event-process');
									break;
								case 2:
									taskElement.classList.add('calendar-event-done');
									break;
								default:
									break;
							}
						}

						Swal.fire({
							icon: 'success',
							title: 'Đã cập nhật trạng thái',
							text: 'Cập nhật thành công!',
							timer: 1500,
							showConfirmButton: false
						}).then(() => {
							
							$('#edit-task-modal').modal('hide');
						});
					} else {
						showAlert(res.error || 'Không thể cập nhật', 'error');
					}
				});
			});



		});

		 function openEditModal(id) {
			$.ajax({
				url: '/Task/GetTaskById?id=' + id,
				type: 'GET',
				success: function (res) {
					if (res.success) {
						const task = res.data;

						$('#editId').val(task.Id);
						$('#editStatus').val(task.Status).selectpicker('refresh');
						$('#editNotes').val(task.Notes);
						$('#edit-task-modal').modal('show');
					} else {
							 showAlert(res.error || 'Không thể lấy dữ liệu.', 'error');
					}
				},
				error: function () {
				  showAlert('Không thể kết nối đến máy chủ.', 'error');
				}
			});
		}
	</script>


}
