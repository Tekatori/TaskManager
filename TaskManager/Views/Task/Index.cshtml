@model List<TaskManager.Models.TaskItem>
@using TaskManager.Models;
@{
    ViewData["Title"] = "Danh sách công việc";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var lstProject = ViewBag.ListProject as List<TaskManager.Models.Project>;
    if(lstProject == null)
    {
        lstProject = new List<TaskManager.Models.Project>();
    }
    int idProjectParam = 0;
    int.TryParse(Context.Request.Query["IdProject"], out idProjectParam);
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">


<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <div class="d-flex flex-wrap align-items-center justify-content-between breadcrumb-content">
                    <h5>📋 Danh sách công việc</h5>
                    <div class="d-flex flex-wrap align-items-center">

                        <div class="iq-search-bar device-search mr-3">
                            <form id="Search" class="searchbox">
                                <button type="submit" class="search-link"><i class="ri-search-line"></i></button>
                                <input id="searchtext" maxlength="200" type="text" class="text search-input" placeholder="Tên công việc...">
                            </form>
                        </div>

                        <div class="dropdown dropdown-project mr-3">
                            <div class="dropdown-toggle" id="dropdownMenuButton03" data-toggle="dropdown">
                                <div class="btn bg-body">
                                    <span class="h6" id="selectedProject">Tất cả dự án</span>
                                    <i class="ri-arrow-down-s-line ml-2 mr-0"></i>
                                </div>
                            </div>
                            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton03">
                                <a class="dropdown-item project-option active" data-id="0" data-name="Tất cả dự án">
                                    <i class="bi bi-layers mr-2"></i> Tất cả dự án
                                </a>
                                @foreach (var project in lstProject)
                                {
                                    <a class="dropdown-item project-option" data-id="@project.Id" data-name="@project.Name">
                                        <i class="bi bi-folder mr-2"></i> @project.Name
                                    </a>
                                }
                            </div>
                        </div>

                        <div class="dropdown dropdown-status mr-3">
                            <div class="dropdown-toggle" id="dropdownMenuButton-status" data-toggle="dropdown">
                                <div class="btn bg-body">
                                    <span class="h6" id="selectedStatus">🕓 @CommonEnums.GetDescription(CommonEnums.TaskStatus.New)/@CommonEnums.GetDescription(CommonEnums.TaskStatus.InProgress)</span>
                                    <i class="ri-arrow-down-s-line ml-2 mr-0"></i>
                                </div>
                            </div>
                            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton-status">
                                <a class="dropdown-item status-option" data-id="@CommonEnums.TaskStatus.All">🔄 @CommonEnums.GetDescription(CommonEnums.TaskStatus.All)</a>
                                <a class="dropdown-item status-option  active" data-id="@((int)CommonEnums.TaskStatus.NotCompleted)">🕓 @CommonEnums.GetDescription(CommonEnums.TaskStatus.New)/@CommonEnums.GetDescription(CommonEnums.TaskStatus.InProgress)</a>
                                <a class="dropdown-item status-option" data-id="@((int)CommonEnums.TaskStatus.New)">🆕 @CommonEnums.GetDescription(CommonEnums.TaskStatus.New)</a>
                                <a class="dropdown-item status-option" data-id="@((int)CommonEnums.TaskStatus.InProgress)">⚙️ @CommonEnums.GetDescription(CommonEnums.TaskStatus.InProgress)</a>
                                <a class="dropdown-item status-option" data-id="@((int)CommonEnums.TaskStatus.Completed)">✅ @CommonEnums.GetDescription(CommonEnums.TaskStatus.Completed)</a>
                            </div>
                        </div>

                        <a href="javascript:void(0)" class="btn btn-primary" data-target="#new-task-modal" data-toggle="modal">
                            <i class="bi bi-plus-circle"></i> Thêm công việc
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-12" >
        <div class="card">
            <div class="card-body" id="task-container">
                @Html.Partial("_TaskListPartial", Model)
            </div>
        </div>
    </div>
</div>


<div class="modal fade bd-example-modal-lg" role="dialog" aria-modal="true" id="new-task-modal">
	<div class="modal-dialog modal-dialog-centered modal-lg" role="document">
		<form id="createTaskForm">
			<div class="modal-content">
				<div class="modal-header d-block text-center pb-3 border-bttom">
					<h3 class="modal-title" id="addTaskModalLabel">📝 Thêm công việc mới</h3>
				</div>
				<div class="modal-body">
					<div class="row">
						<div class="col-lg-12">
							<div class="form-group mb-3">
								<label for="Title" class="h5">Tiêu đề*</label>
								<input type="text" class="form-control" id="Title" name="Title" placeholder="Nhập tiêu đề" maxlength="255" required
									   oninvalid="this.setCustomValidity('Vui lòng nhập tiêu đề')"
									   oninput="this.setCustomValidity('')">
							</div>
						</div>
						<div class="col-lg-12">
							<div class="form-group mb-3">
								<label for="ProjectId" class="h5">Dự án*</label>
								<div class="dropdown bootstrap-select form-control">
									<select id="ProjectId" name="ProjectId" class="form-control" data-style="py-0">
										@foreach (var project in lstProject)
										{
											if (project.Id == idProjectParam)
											{
												<option value="@project.Id" selected>@project.Name</option>
											}
											else
											{
												<option value="@project.Id">@project.Name</option>
											}

										}
									</select>
								</div>
							</div>
						</div>
                        <div class="col-lg-12" id="assignedToWrapper">
                            <div class="form-group mb-3">
                                <label for="AssignedTo" class="h5">Người được giao*</label>
                                <div class="dropdown bootstrap-select form-control">
                                    <select id="AssignedTo" name="AssignedTo" class="form-control" data-style="py-0" disabled>
                                        <option value="0">Bản thân</option>
                                    </select>
                                </div>
                            </div>
                        </div>


						<div class="col-lg-6">
							<label for="Priority" class="h5">Độ ưu tiên</label>
							<div class="dropdown bootstrap-select form-control">
								<select id="Priority" name="Priority" class="form-control" data-style="py-0">
									@foreach (var priority in Enum.GetValues(typeof(CommonEnums.TaskPriority)).Cast<CommonEnums.TaskPriority>())
									{
										<option value="@((int)priority)" @(priority == CommonEnums.TaskPriority.Medium ? "selected" : "")>
											@CommonEnums.GetDescription(priority)
										</option>
									}
								</select>

							</div>
						</div>
						<div class="col-lg-6">
							<div class="form-group mb-3">
								<label for="DueDate" class="h5">Hạn chót*</label>
								<input type="date" class="form-control" id="DueDate" name="DueDate" value="">
							</div>
						</div>
						<div class="col-lg-12">
							<div class="form-group mb-3">
								<label for="Description" class="h5">Mô tả</label>
								<textarea class="form-control" id="Description" name="Description" rows="2" placeholder="Nhập mô tả"></textarea>
							</div>
						</div>
						<div class="col-lg-12">
							<div class="form-group mb-3">
								<label for="Notes" class="h5">Ghi chú</label>
								<textarea class="form-control" id="Notes" name="Notes" rows="2" placeholder="Nhập ghi chú"></textarea>
							</div>
						</div>
						<div class="col-lg-12">
							<div class="d-flex flex-wrap align-items-ceter justify-content-center mt-4">
								<button type="submit" class="btn btn-primary mr-3">Lưu</button>
								<div class="btn btn-secondary" data-dismiss="modal">Huỷ</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</form>
	</div>
</div>




<div class="modal fade bd-example-modal-lg" role="dialog" aria-modal="true" id="edit-task-modal">
    <div class="modal-dialog  modal-dialog-centered modal-lg" role="document">
        <form id="editTaskForm">
            <div class="modal-content">
                <div class="modal-header d-block text-center pb-3 border-bttom">
                    <h3 class="modal-title" id="editTaskModalLabel">✏️ Cập nhật trạng thái</h3>
                </div>
                <div class="modal-body">
           
                    <div class="row">
                        <div class="col-lg-12">
                            <input type="hidden" id="editId" name="Id" />
                        </div>
                   
                        <div class="col-lg-12">
                            <label for="editStatus" class="h5">Trạng thái</label>
                            <div class="dropdown bootstrap-select form-control">
                                <select id="editStatus" name="Status" class="form-control" data-style="py-0">

                                    @foreach (var status in Enum.GetValues(typeof(CommonEnums.TaskStatus)).Cast<CommonEnums.TaskStatus>())
                                    {
                                        if (status != CommonEnums.TaskStatus.NotCompleted && status != CommonEnums.TaskStatus.All)
                                        {
                                            <option value="@((int)status)" @(status == CommonEnums.TaskStatus.InProgress ? "selected" : "")>
                                                @CommonEnums.GetDescription(status)
                                            </option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>

                        <div class="col-lg-12">
                            <div class="form-group mb-3">
                                <label for="editNotes" class="h5">Ghi chú*</label>
                                <textarea class="form-control" id="editNotes" name="Notes" rows="2" placeholder="Nhập ghi chú cập nhật" required
                                          oninvalid="this.setCustomValidity('Vui lòng nhập ghi chú cập nhật')"
                                          oninput="this.setCustomValidity('')"></textarea>
                            </div>
                        </div>

                        <div class="col-lg-12">
                            <div class="d-flex flex-wrap align-items-ceter justify-content-center mt-4">
                                <button type="submit" class="btn btn-primary mr-3">Lưu</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>



@section Scripts {
    <script>
        $(document).ready(function () {
            $('[data-bs-toggle="tooltip"]').tooltip();

            $('#createTaskForm').submit(function (e) {
                e.preventDefault();

                var title = $('#Title').val().trim();
                var projectId = $('#ProjectId').val();
                var dueDate = $('#DueDate').val();

  
                if (!title) {
                    Swal.fire('Thiếu thông tin', 'Vui lòng nhập tiêu đề.', 'warning');
                    return;
                }

                if (!projectId) {
                    Swal.fire('Thiếu thông tin', 'Vui lòng chọn dự án.', 'warning');
                    return;
                }

                if (!dueDate) {
                    Swal.fire('Thiếu thông tin', 'Vui lòng chọn hạn chót.', 'warning');
                    return;
                }


                var data = $(this).serialize();

                $.post('/Task/Create', data, function (res) {
                    if (res.success) {
                          Swal.fire({
                                  icon: 'success',
                                  title:'Đã thêm công việc',
                                  text: 'Trang sẽ tự làm mới...',
                                  timer: 1500,
                                  showConfirmButton: false
                              }).then(() => {
                                  location.reload();
                              });
                    } else {
                        Swal.fire('Lỗi', res.error || 'Không thể thêm', 'error');
                    }
                });
            });


         
            $('#editTaskForm').submit(function (e) {
                e.preventDefault();
                var notes = $('#editNotes').val().trim();
                var status = $('#editStatus').val();
                if (!notes) {
                    Swal.fire('Thiếu thông tin', 'Vui lòng ghi chú cập nhật.', 'warning');
                    return;
                }
                if(!status)
                {
                     $('#editStatus').val(1).selectpicker('refresh');
                }

                var data = $(this).serialize();


                $.post('/Task/Edit', data, function (res) {
                    if (res.success) {
                          Swal.fire({
                                    icon: 'success',
                                    title:'Đã cập nhật trạng thái',
                                    text: 'Trang sẽ tự làm mới...',
                                    timer: 1500,
                                    showConfirmButton: false
                                }).then(() => {
                                    location.reload();
                                });
                    } else {
                        Swal.fire('Lỗi', res.error || 'Không thể cập nhật', 'error');
                    }
                });
            });
        });

         $(document).ready(function () {
            $('#Priority').selectpicker('refresh');
            $('#ProjectId').selectpicker('refresh');
            $('#AssignedTo').selectpicker('refresh');
        });

        function openEditModal(id) {
            $.ajax({
                url: '/Task/GetTaskById?id=' + id,
                type: 'GET',
                success: function (res) {
                    if (res.success) {
                        const task = res.data;

                        $('#editId').val(task.Id);
                        $('#editStatus').val(task.Status).selectpicker('refresh');
                        $('#editNotes').val(task.Notes);
                        $('#edit-task-modal').modal('show');
                    } else {
                        Swal.fire('Lỗi', res.error || 'Không thể lấy dữ liệu.', 'error');
                    }
                },
                error: function () {
                    Swal.fire('Lỗi', 'Không thể kết nối đến máy chủ.', 'error');
                }
            });
        }

        function confirmDelete(TaskId) {
            Swal.fire({
                title: 'Bạn có chắc muốn xóa?',
                text: "Hành động này không thể hoàn tác!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Xóa',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Task/DeleteTask',
                        type: 'POST',
                        data: { id: TaskId },
                        success: function (res) {
                            if (res.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Đã xóa công việc!',
                                    timer: 1000,
                                    showConfirmButton: false
                                }).then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire('Lỗi', res.error || 'Không thể xóa.', 'error');
                            }
                        },
                        error: function () {
                            Swal.fire('Lỗi', 'Không thể kết nối server.', 'error');
                        }
                    });
                }
            });
        }

      $('#ProjectId').on('change', function () {
            const projectId = $(this).val();
            const $assignedToWrapper = $('#assignedToWrapper'); 
            const $assignedTo = $('#AssignedTo');

            $.ajax({
                url: '/Task/GetTeamGroupByIdProject',
                type: 'GET',
                data: { pIdProject: projectId },
                success: function (res) {
                    $assignedTo.empty();
                    $assignedTo.append(`<option value="0">Bản thân</option>`);

                    if (res.success && res.data && res.data.length > 0) {
                        res.data.forEach(user => {
                            $assignedTo.append(
                                `<option value="${user.Id}">${user.Username} - ${user.Email}</option>`
                            );
                        });

                        $assignedTo.prop('disabled', false);
                    } else {
                        $assignedTo.prop('disabled', true); 
                    }

                    $assignedTo.selectpicker('refresh');
                },
                error: function () {
                    Swal.fire('Lỗi', 'Không thể kết nối đến máy chủ.', 'error');
                }
            });
        });




    </script>

    <script>
        function doFilterTasks() {
            const text = $('#searchtext').val().trim();
            const statusId = $('.status-option.active').data('id') || null;
            const projectId = $('.project-option.active').data('id') || null;

            $.ajax({
                url: '/Task/FilterTask',
                type: 'GET',
                data: {
                    textsearch: text,
                    IdStatus: statusId,
                    IdProject: projectId
                },
                success: function (html) {
                    $('#task-container').html(html);
                },
                error: function () {
                    alert('Lỗi khi lọc công việc.');
                }
            });
        }

        $(document).ready(function () {
            $('#Search').on('submit', function (e) {
                e.preventDefault();
                doFilterTasks();
            });

            $('.status-option').click(function () {
                $('.status-option').removeClass('active');
                $(this).addClass('active');
                $('#selectedStatus').text($(this).text().trim());
                doFilterTasks();
            });

            $('.project-option').click(function () {
                $('.project-option').removeClass('active');
                $(this).addClass('active');
                $('#selectedProject').text($(this).data('name'));
                doFilterTasks();
            });
        });
    </script>
}
