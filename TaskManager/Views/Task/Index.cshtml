@model List<TaskManager.Models.TaskItem>
@using TaskManager.Models;
@{
    ViewData["Title"] = "Danh sách công việc";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var lstProject = ViewBag.ListProject as List<TaskManager.Models.Project>;
    if(lstProject == null)
    {
        lstProject = new List<TaskManager.Models.Project>();
    }
    int idProjectParam = 0;
    int.TryParse(Context.Request.Query["IdProject"], out idProjectParam);
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">

<style>
    .custom-file-input:lang(en) ~ .custom-file-label::after {
        content: "Chọn tệp";
    }
</style>


<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <div class="d-flex flex-wrap align-items-center justify-content-between breadcrumb-content">
                    <h5>📋 Danh sách công việc</h5>
                    <div class="d-flex flex-wrap align-items-center">

                        <div class="iq-search-bar device-search mr-3">
                            <form id="Search" class="searchbox">
                                <button type="submit" class="search-link"><i class="ri-search-line"></i></button>
                                <input id="searchtext" maxlength="200" type="text" class="text search-input" placeholder="Tên công việc...">
                            </form>
                        </div>

                        <div class="nav-item nav-icon search-content mr-3">
                            <a href="javascript:void(0)" class="search-toggle rounded" id="dropdownSearch" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <i class="ri-search-line"> <span style="color:ActiveCaption">Click ở đây để tìm kiếm</span></i>
                            </a>
                            <div class="iq-search-bar iq-sub-dropdown dropdown-menu" aria-labelledby="dropdownSearch">
                                <form id="SearchMobile" class="searchbox p-2">
                                    <div class="form-group mb-0 position-relative">
                                        <input id="searchtext2" maxlength="200" class="text search-input font-size-12" placeholder="Tên công việc...">
                                        <button type="submit" href="javascript:void(0)" class="search-link"><i class="ri-search-line"></i></button>
                                    </div>
                                </form>
                            </div>
                        </div>

                        <div class="list-grid-toggle d-flex align-items-center mr-3">
                            <button type="button" class="btn btn-warning" id="btnClearSearch">
                                <i class="bi bi-eraser"></i>
                            </button>
                        </div>

                        <div class="dropdown dropdown-project mr-3">
                            <div class="dropdown-toggle" id="dropdownMenuButton03" data-toggle="dropdown">
                                <div class="btn bg-body">
                                    <span class="h6" id="selectedProject">Tất cả dự án</span>
                                    <i class="ri-arrow-down-s-line ml-2 mr-0"></i>
                                </div>
                            </div>
                            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton03">
                                <a class="dropdown-item project-option active" data-id="0" data-name="Tất cả dự án">
                                    <i class="bi bi-layers mr-2"></i> Tất cả dự án
                                </a>
                                @foreach (var project in lstProject)
                                {
                                    <a class="dropdown-item project-option" data-id="@project.Id" data-name="@project.Name">
                                        <i class="bi bi-folder mr-2"></i> @project.Name
                                    </a>
                                }
                            </div>
                        </div>

                        <div class="dropdown dropdown-project mr-3">
                            <div class="dropdown-toggle" id="dropdownMenuButton-status" data-toggle="dropdown">
                                <div class="btn bg-body">
                                    <span class="h6" id="selectedStatus">🕓 @CommonEnums.GetDescription(CommonEnums.TaskStatus.New)/@CommonEnums.GetDescription(CommonEnums.TaskStatus.InProgress)</span>
                                    <i class="ri-arrow-down-s-line ml-2 mr-0"></i>
                                </div>
                            </div>
                            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton-status">
                                <a class="dropdown-item status-option" data-id="@CommonEnums.TaskStatus.All">🔄 @CommonEnums.GetDescription(CommonEnums.TaskStatus.All)</a>
                                <a class="dropdown-item status-option  active" data-id="@((int)CommonEnums.TaskStatus.NotCompleted)">🕓 @CommonEnums.GetDescription(CommonEnums.TaskStatus.New)/@CommonEnums.GetDescription(CommonEnums.TaskStatus.InProgress)</a>
                                <a class="dropdown-item status-option" data-id="@((int)CommonEnums.TaskStatus.New)">🆕 @CommonEnums.GetDescription(CommonEnums.TaskStatus.New)</a>
                                <a class="dropdown-item status-option" data-id="@((int)CommonEnums.TaskStatus.InProgress)">⚙️ @CommonEnums.GetDescription(CommonEnums.TaskStatus.InProgress)</a>
                                <a class="dropdown-item status-option" data-id="@((int)CommonEnums.TaskStatus.Completed)">✅ @CommonEnums.GetDescription(CommonEnums.TaskStatus.Completed)</a>
                            </div>
                        </div>

                        <a href="javascript:void(0)" onclick="openAddModal()" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Thêm công việc
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-12" id="task-container">
        <div class="card">
            <div class="card-body" >
                @Html.Partial("_TaskListPartial", Model)
            </div>
        </div>
    </div>
</div>


<div class="modal fade bd-example-modal-lg" role="dialog" aria-modal="true" id="new-task-modal">
	<div class="modal-dialog modal-dialog-centered modal-lg" role="document">
		<form id="createTaskForm">
			<div class="modal-content">
				<div class="modal-header d-block text-center pb-3 border-bttom">
					<h3 class="modal-title" id="addTaskModalLabel">📝 Thêm công việc mới</h3>
				</div>
				<div class="modal-body">
					<div class="row">
						<div class="col-lg-12">
							<div class="form-group mb-3">
								<label for="Title" class="h5">Tiêu đề*</label>
								<input type="text" class="form-control" id="Title" name="Title" placeholder="Nhập tiêu đề" maxlength="255" required
									   oninvalid="this.setCustomValidity('Vui lòng nhập tiêu đề')"
									   oninput="this.setCustomValidity('')">
							</div>
						</div>
						<div class="col-lg-12">
							<div class="form-group mb-3">
								<label for="ProjectId" class="h5">Dự án*</label>
								<div class="dropdown bootstrap-select form-control">
									<select id="ProjectId" name="ProjectId" class="form-control" data-style="py-0">
										@foreach (var project in lstProject)
										{
											if (project.Id == idProjectParam)
											{
												<option value="@project.Id" selected>@project.Name</option>
											}
											else
											{
												<option value="@project.Id">@project.Name</option>
											}

										}
									</select>
								</div>
							</div>
						</div>
                        <div class="col-lg-12" id="assignedToWrapper">
                            <div class="form-group mb-3">
                                <label for="AssignedTo" class="h5">Người được giao*</label>
                                <div class="dropdown bootstrap-select form-control">
                                    <select id="AssignedTo" name="AssignedTo" class="form-control" data-style="py-0" disabled>
                                        <option value="0">Bản thân</option>
                                    </select>
                                </div>
                            </div>
                        </div>
						<div class="col-lg-6">
							<label for="Priority" class="h5">Độ ưu tiên</label>
							<div class="dropdown bootstrap-select form-control">
								<select id="Priority" name="Priority" class="form-control" data-style="py-0">
									@foreach (var priority in Enum.GetValues(typeof(CommonEnums.TaskPriority)).Cast<CommonEnums.TaskPriority>())
									{
										<option value="@((int)priority)" @(priority == CommonEnums.TaskPriority.Medium ? "selected" : "")>
											@CommonEnums.GetDescription(priority)
										</option>
									}
								</select>

							</div>
						</div>
						<div class="col-lg-6">
							<div class="form-group mb-3">
								<label for="DueDate" class="h5">Hạn chót*</label>
								<input type="date" class="form-control" id="DueDate" name="DueDate" value="">
							</div>
						</div>
						<div class="col-lg-12">
							<div class="form-group mb-3">
								<label for="Description" class="h5">Mô tả</label>
								<textarea class="form-control" id="Description" name="Description" rows="2" placeholder="Nhập mô tả"></textarea>
							</div>
						</div>
						<div class="col-lg-12">
							<div class="form-group mb-3">
								<label for="Notes" class="h5">Ghi chú</label>
								<textarea class="form-control" id="Notes" name="Notes" rows="2" placeholder="Nhập ghi chú"></textarea>
							</div>
						</div>
                        <div class="col-lg-12">
                            <div class="form-group mb-0">
                                <label for="Attachment" class="h5">Đính kèm</label>
                                <div class="custom-file">
                                    <input type="file" class="custom-file-input" id="Attachment" name="Attachment" accept="image/*, .pdf, .docx, .xlsx, .zip, .rar">
                                    <label class="custom-file-label" for="Attachment">Chọn tệp</label>
                                </div>
                                <small class="form-text text-muted">Chọn các tệp đính kèm như ảnh, tài liệu PDF, Word, Excel hoặc file nén (.zip, .rar).</small>
                            </div>
                        </div>
						<div class="col-lg-12">
							<div class="d-flex flex-wrap align-items-ceter justify-content-center mt-4">
                                <button type="submit" class="btn btn-primary mr-3"><i class="fas fa-save"></i>Lưu</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="bi bi-x-circle"></i>Đóng</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</form>
	</div>
</div>




<div class="modal fade bd-example-modal-lg" role="dialog" aria-modal="true" id="edit-task-modal">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <form id="editTaskForm">
            <div class="modal-content">
                <div class="modal-header d-block text-center pb-3 border-bttom">
                    <h3 class="modal-title" id="editTaskModalLabel">✏️ Cập nhật trạng thái</h3>
                </div>
                <div class="modal-body">
           
                    <div class="row">
                        <div class="col-lg-12">
                            <input type="hidden" id="editId" name="Id" />
                        </div>
                   
                        <div class="col-lg-12">
                            <label for="editStatus" class="h5">Trạng thái</label>
                            <div class="dropdown bootstrap-select form-control">
                                <select id="editStatus" name="Status" class="form-control" data-style="py-0">

                                    @foreach (var status in Enum.GetValues(typeof(CommonEnums.TaskStatus)).Cast<CommonEnums.TaskStatus>())
                                    {
                                        if (status != CommonEnums.TaskStatus.NotCompleted && status != CommonEnums.TaskStatus.All)
                                        {
                                            <option value="@((int)status)" @(status == CommonEnums.TaskStatus.InProgress ? "selected" : "")>
                                                @CommonEnums.GetDescription(status)
                                            </option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>

                        <div class="col-lg-12">
                            <div class="form-group mb-3">
                                <label for="editNotes" class="h5">Ghi chú*</label>
                                <textarea class="form-control" id="editNotes" name="Notes" rows="2" placeholder="Nhập ghi chú cập nhật" required
                                          oninvalid="this.setCustomValidity('Vui lòng nhập ghi chú cập nhật')"
                                          oninput="this.setCustomValidity('')"></textarea>
                            </div>
                        </div>

                        <div class="col-lg-12">
                            <div class="d-flex flex-wrap align-items-ceter justify-content-center mt-4">
                                <button type="submit" class="btn btn-primary mr-3"><i class="fas fa-save"></i>Lưu</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="bi bi-x-circle"></i>Đóng</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>



<div class="modal fade" id="commentModal"  tabindex="-1" aria-labelledby="commentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="commentModalLabel">💬 Bình luận công việc</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Đóng">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="comment-list" style="max-height: 300px; overflow-y: auto;">
                    <p class="text-center text-muted">Đang tải bình luận...</p>
                </div>
                <hr />

                <div>
                    <textarea id="newComment" class="form-control mb-2" rows="3" placeholder="Viết bình luận..."></textarea>
                    <div class="d-flex justify-content-end gap-2">
                        <button class="btn btn-primary mr-2" id="btnAddComment">
                            <i class="bi bi-send"></i> Gửi bình luận
                        </button>
                        <button type="button" class="btn btn-warning  mr-2" id="btnClearComment">
                            <i class="bi bi-eraser"></i> Clear
                        </button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="bi bi-x-circle"></i> Đóng
                        </button>
                       
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="editCommentModal" tabindex="-1" aria-labelledby="editCommentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editCommentModalLabel">Sửa Bình Luận</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Đóng">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <textarea id="editCommentContent" class="form-control mb-3" rows="3"></textarea>
                <div class="d-flex justify-content-end">
                    <button id="btnSaveComment" class="btn btn-success"><i class="fas fa-save"></i>Lưu</button>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="attachmentModal" tabindex="-1" aria-labelledby="attachmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="attachmentModalLabel">Đính kèm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="attachmentContent"></div>
            </div>
            <div class="modal-footer">            
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"> <i class="bi bi-x-circle"></i>Đóng</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editAttachmentModal" tabindex="-1" aria-labelledby="editAttachmentModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<form id="editAttachmentForm" method="post" enctype="multipart/form-data">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="editAttachmentModalLabel">Sửa đính kèm</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">

					<input type="hidden" id="editAttachmentTaskId" name="taskId" />
					<input type="hidden" id="editIdAttachment" name="IdAttachment" />


					<div class="col-lg-12">
						<div class="form-group mb-0">
							<label for="newAttachment" class="h5">Đính kèm</label>
							<div class="custom-file">
								<input type="file" class="custom-file-input" id="newAttachment" name="newAttachment" accept="image/*, .pdf, .docx, .xlsx, .zip, .rar">
								<label class="custom-file-label" for="newAttachment">Chọn tệp</label>
							</div>
							<small class="form-text text-muted">Chọn các tệp đính kèm như ảnh, tài liệu PDF, Word, Excel hoặc file nén (.zip, .rar).</small>
						</div>
					</div>

					<div class="col-lg-12 mr-3">
						<label for="currentAttachment" class="form-label">Tệp hiện tại</label>
						<input type="text" class="form-control" id="currentAttachment" value="" readonly>
					</div>
				</div>
				<div class="modal-footer">
                    <button type="submit" class="btn btn-primary"><i class="fas fa-save"></i>Lưu</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="bi bi-x-circle"></i>Đóng</button>

				</div>
			</div>

		</form>
	</div>
</div>

<div class="modal fade" id="addAttachmentModal" tabindex="-1" aria-labelledby="addAttachmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <form id="addAttachmentForm" method="post" enctype="multipart/form-data">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addAttachmentModalLabel">Thêm đính kèm</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="taskIdForNewAttachment" name="taskId" />

                    <div class="col-lg-12">
                        <div class="form-group mb-0">
                            <label for="newAttachmentFile" class="h5">Chọn tệp đính kèm</label>
                            <div class="custom-file">
                                <input type="file" class="custom-file-input" id="newAttachmentFile" name="newAttachmentFile" accept="image/*, .pdf, .docx, .xlsx, .zip, .rar">
                                <label class="custom-file-label" for="newAttachmentFile">Chọn tệp</label>
                            </div>
                            <small class="form-text text-muted">Chọn các tệp đính kèm như ảnh, tài liệu PDF, Word, Excel hoặc file nén (.zip, .rar).</small>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary"><i class="fas fa-save"></i>Lưu</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="bi bi-x-circle"></i>Đóng</button>
                </div>
            </div>
        </form>
    </div>
</div>



@section Scripts {
    <script>
        $(document).ready(function () {
            $('[data-bs-toggle="tooltip"]').tooltip();

            $('#createTaskForm').submit(function (e) {
                e.preventDefault();

                var title = $('#Title').val().trim();
                var projectId = $('#ProjectId').val();
                var dueDate = $('#DueDate').val();

  
                if (!title) {
                    showAlert('Vui lòng nhập tiêu đề.', 'warning');
                    return;
                }

                if (!projectId) {
                    showAlert('Vui lòng chọn dự án.', 'warning');
                    return;
                }

                if (!dueDate) {
                     showAlert('Vui lòng chọn hạn chót.', 'warning');
                    return;
                }


                var formData = new FormData(this);

                $.ajax({
                        url: '/Task/Create', 
                        type: 'POST',
                        data: formData,
                        processData: false,  
                        contentType: false, 
                        success: function (res) {
                            if (res.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Đã thêm công việc',
                                    text: 'Trang sẽ tự làm mới...',
                                    timer: 1500,
                                    showConfirmButton: false
                                }).then(() => {
                                    location.reload();
                                });
                            } else {
                                showAlert('Có lỗi xảy ra khi gửi dữ liệu.', 'error');
                            }
                        },
                        error: function () {
                            showAlert('Có lỗi xảy ra khi gửi dữ liệu.', 'error');
                        }
                    });
            });
      
            $('#editTaskForm').submit(function (e) {
                e.preventDefault();
                var notes = $('#editNotes').val().trim();
                var status = $('#editStatus').val();
                if (!notes) {
                    showAlert('Vui lòng ghi chú cập nhật.', 'info');
                    return;
                }
                if(!status)
                {
                     $('#editStatus').val(1).selectpicker('refresh');
                }

                var data = $(this).serialize();


                $.post('/Task/Edit', data, function (res) {
                    if (res.success) {
                          Swal.fire({
                                    icon: 'success',
                                    title:'Đã cập nhật trạng thái',
                                    text: 'Trang sẽ tự làm mới...',
                                    timer: 1500,
                                    showConfirmButton: false
                                }).then(() => {
                                    location.reload();
                                });
                    } else {
                        showAlert(res.error || 'Không thể cập nhật', 'error');
                    }
                });
            });
        });

         $(document).ready(function () {
            $('#Priority').selectpicker('refresh');
            $('#ProjectId').selectpicker('refresh');
            $('#AssignedTo').selectpicker('refresh');
        });

          function openAddModal() {
              $('#Title').val('');

              $('#DueDate').val('');
              $('#Notes').val('');
              $('#Description').val('');
              $('#Attachment').val('');
              $('#Attachment').next('.custom-file-label').html('Chọn tệp');

              var selectedProjectId = $('.project-option.active').data('id');
              if(selectedProjectId == null || selectedProjectId == 0)
              {
                 selectedProjectId = '@(lstProject.FirstOrDefault()?.Id ?? 0)';
              }
              $('#ProjectId').val(selectedProjectId).selectpicker('refresh').change();

              $('#Priority').val('@((int)CommonEnums.TaskPriority.Medium)').selectpicker('refresh');


              $('#new-task-modal').modal('show');
          }

          $(document).ready(function () {
              const urlParams = new URLSearchParams(window.location.search);
              if (urlParams.get('popup') === 'add') {
                     openAddModal();
              }
          });

        function openEditModal(id) {
            $.ajax({
                url: '/Task/GetTaskById?id=' + id,
                type: 'GET',
                success: function (res) {
                    if (res.success) {
                        const task = res.data;

                        $('#editId').val(task.Id);
                        $('#editStatus').val(task.Status).selectpicker('refresh');
                        $('#editNotes').val(task.Notes);
                        $('#edit-task-modal').modal('show');
                    } else {
                             showAlert(res.error || 'Không thể lấy dữ liệu.', 'error');
                    }
                },
                error: function () {
                  showAlert('Không thể kết nối đến máy chủ.', 'error');
                }
            });
        }

        function confirmDelete(TaskId) {
            Swal.fire({
                title: 'Bạn có chắc muốn xóa?',
                text: "Hành động này không thể hoàn tác!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Xóa',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Task/DeleteTask',
                        type: 'POST',
                        data: { id: TaskId },
                        success: function (res) {
                            if (res.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Đã xóa công việc!',
                                    timer: 1000,
                                    showConfirmButton: false
                                }).then(() => {
                                    location.reload();
                                });
                            } else {
                               showAlert(res.error || 'Không thể xóa.', 'error');
                            }
                        },
                        error: function () {
                            showAlert('Không thể kết nối server.', 'error');
                        }
                    });
                }
            });
        }

      $('#ProjectId').on('change', function () {
            const projectId = $(this).val();
            const $assignedTo = $('#AssignedTo');

            $.ajax({
                url: '/Task/GetTeamGroupByIdProject',
                type: 'GET',
                data: { pIdProject: projectId },
                success: function (res) {
                    $assignedTo.empty();
                    $assignedTo.append(`<option value="0">Bản thân</option>`);

                    if (res.success && res.data && res.data.length > 0) {
                        res.data.forEach(user => {
                            $assignedTo.append(
                                `<option value="${user.Id}">${user.Username} - ${user.Email}</option>`
                            );
                        });

                        $assignedTo.prop('disabled', false);
                    } else {
                        $assignedTo.prop('disabled', true); 
                    }

                    $assignedTo.selectpicker('refresh');
                },
                error: function () {
                       showAlert('Không thể kết nối server.', 'error');
                }
            });
        });

        $(document).ready(function () {
            const urlParams = new URLSearchParams(window.location.search);
            const idProject = urlParams.get('IdProject');

            if (idProject && idProject != "0") {
                const selectedItem = $('.project-option[data-id="' + idProject + '"]');
                if (selectedItem.length > 0) {
                    const projectName = selectedItem.data('name');
                    $('#selectedProject').text(projectName);
                    $('.project-option').removeClass('active');
                    selectedItem.addClass('active');
                    doFilterTasks();
                }
            }
        });

        $(document).ready(function () {
            const urlParams = new URLSearchParams(window.location.search);
            const IdTaskRedirect = urlParams.get('IdTaskRedirectCmt');

            if (IdTaskRedirect) {
                    fetch(`/Task/GetTaskById?id=${IdTaskRedirect}`)
                        .then(response => response.json())
                        .then(responseData => {
                            if (responseData && responseData.success && responseData.data) {
                                const task = responseData.data;
                                $('#searchtext').val(task.Title);
                                $('#searchtext2').val(task.Title);
                                doFilterTasks();
                                openCommentModal(task.Id);
                            } else {
                                showAlert('Dữ liệu không hợp lệ', 'error');
                            }
                        })
                        .catch(error => showAlert('Dữ liệu không hợp lệ', 'error'));
             } 
        });

        $(document).ready(function () {
              const urlParams = new URLSearchParams(window.location.search);
              const IdTaskRedirect = urlParams.get('IdTaskRedirect');

              if (IdTaskRedirect) {
                      fetch(`/Task/GetTaskById?id=${IdTaskRedirect}`)
                          .then(response => response.json())
                          .then(responseData => {
                              if (responseData && responseData.success && responseData.data) {
                                  const task = responseData.data;
                                  $('#searchtext').val(task.Title);
                                  $('#searchtext2').val(task.Title);
                                  doFilterTasks();
                              } else {
                                  showAlert('Dữ liệu không hợp lệ', 'error');
                              }
                          })
                          .catch(error => showAlert('Dữ liệu không hợp lệ', 'error'));
               }
          });


  

        function getAssignedToName(taskId, assignedTo) {
            $.ajax({
                url: '/Task/GetTaskAssigneeName',
                type: 'POST',
                data: { AssignedTo: assignedTo },
                success: function (res) {
                    if (res.success) {
                        $(`#AssignedTo-${taskId}`).val(res.data);
                    } else {
                        $(`#AssignedTo-${taskId}`).val(''); 
                    }
                },
                error: function () {
                    $(`#AssignedTo-${taskId}`).val(''); 
                }
            });
        }
        $(document).ready(function () {
            $('.assignedToInput').each(function () {
                const taskId = $(this).data('task-id');
                const assignedTo = $(this).val();

                if (assignedTo && assignedTo !== '0') { 
                    getAssignedToName(taskId, assignedTo); 
                }
            });
        });


        $(document).ready(function () {
            $('[data-toggle="collapse"]').click(function (e) {
                var targetCollapse = $(this).attr('href');
                $('.collapse').not(targetCollapse).collapse('hide');
            });
        });


        function openCommentModal(taskId) {
            $('#commentModal').modal('show');
            $('#commentModal').data('task-id', taskId); 

            loadComments(taskId);
        }

        function loadComments(taskId) {
            const $commentList = $('#comment-list');
            $commentList.html('<p class="text-center text-muted">Đang tải bình luận...</p>');

            $.ajax({
                url: '/Task/GetCommentsByTask', 
                type: 'GET',
                data: { taskId: taskId },
                success: function (res) {
                    if (res.success) {
                        renderComments(res.data);
                    } else {
                        $commentList.html(`<p class="text-center text-muted">${res.error ?? 'Không có bình luận.'}</p>`);
                    }
                },
                error: function () {
                    $commentList.html('<p class="text-center text-danger">Có lỗi xảy ra khi tải bình luận.</p>');
                }
            });
        }

        function renderComments(comments) {
            const $commentList = $('#comment-list');
            if (!comments || comments.length === 0) {
                $commentList.html('<p class="text-center text-muted">Chưa có bình luận nào.</p>');
                return;
            }

            let html = '';
                comments.forEach(c => {
                html += `
                    <div class="mb-3 border-bottom pb-2" data-comment-id="${c.Id}">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>${c.UserName}</strong>
                                <small class="text-muted ms-2">${formatDateTime(c.CreatedAt)}</small>
                            </div>
                            
                        </div>
                        <div class="comment-content">${c.Content}</div>
                    </div>
                `;
            });

            $commentList.html(html);
        }

          // <a href="javascript:void(0)" class="btn bg-success-light mr-3 edit-comment-btn" data-comment-id="${c.Id}">
          //                       <i class="bi bi-pencil-square"></i>
          //                     </a>

        function formatDateTime(dateString) {
            const date = new Date(dateString);
            return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;
        }


        $(document).on('click', '.open-comment-modal', function () {
            const taskId = $(this).data('task-id');  
            $('#commentModal').data('task-id', taskId);
            $('#newComment').val('');  
        });

        $(document).on('click', '#btnAddComment', function () {
            const taskId = $('#commentModal').data('task-id');
            const content = $('#newComment').val().trim();

            if (!content) {
                showAlert('Vui lòng nhập nội dung bình luận!', 'warning');
                return;
            }

            $.ajax({
                url: '/Task/AddComment',
                type: 'POST',
                data: { TaskId: taskId, Content: content },
                success: function (res) {
                    if (res.success) {
                        $('#newComment').val('');
                        loadComments(taskId);
                    } else {
                         showAlert('Có lỗi xảy ra!', 'error');
                    }
                },
                error: function () {
                   showAlert('Có lỗi xảy ra khi gửi bình luận!', 'error');
                }
            });
        });


        $(document).on('click', '#btnClearComment', function () {
            $('#newComment').val(''); 
        });

        // chức năng chỉnh sửa bình luận
        //   $(document).on('click', '.edit-comment-btn', function () {
        //     const commentId = $(this).data('comment-id'); // Lấy ID của bình luận
        //       const commentContent = $(this).closest('div').next('.comment-content').text().trim();

        //     // Đưa ID và nội dung vào modal
        //     $('#editCommentModal').data('comment-id', commentId);
        //     $('#editCommentContent').val(commentContent); // Đưa nội dung vào ô input

        //     // Hiển thị modal
        //     $('#editCommentModal').modal('show');
        // });

        //  $('#btnSaveComment').on('click', function () {
        //     const commentId = $('#editCommentModal').data('comment-id');
        //     const updatedContent = $('#editCommentContent').val().trim();

        //     if (!updatedContent) {
        //         alert('Vui lòng nhập nội dung bình luận!');
        //         return;
        //     }

        //     $.ajax({
        //         url: '/Task/UpdateComment',
        //         type: 'POST',
        //         data: {
        //             commentId: commentId,
        //             content: updatedContent
        //         },
        //         success: function (res) {
        //             if (res.success) {
        //                 // Đóng modal và tải lại bình luận
        //                 $('#editCommentModal').modal('hide');
        //                 loadComments(commentId); // Cập nhật lại bình luận
        //             } else {
        //                 alert(res.error ?? 'Có lỗi xảy ra!');
        //             }
        //         },
        //         error: function () {
        //             alert('Có lỗi xảy ra khi cập nhật bình luận!');
        //         }
        //     });
        // });



        function openAttachmentModal(taskId) {
            $.ajax({
                url: '/Task/GetAttachments',
                type: 'GET',
                data: { taskId: taskId },
                success: function (data) {
                    if (data.success && data.attachment) {
                        var attachmentHtml = `                  
                            <div>
                                   <a onclick="openEditAttachmentModal(${taskId}, '${data.attachment.Id}','${data.attachment.FileName}')" title="Sửa đính kèm" href="javascript:void(0)" class="btn bg-success-light ml-2">
                                       <i class="bi bi-pencil-square"></i>
                                    </a>
                                   <a onclick="deleteAttachment(${taskId}, '${data.attachment.Id}')" title="Xoá đính kèm" href="javascript:void(0)" class="btn bg-danger-light ml-2">
                                        <i class="bi bi-trash"></i>
                                    </a>
                                <a class="ml-2" href="${data.attachment.FileUrl}" target="_blank">${data.attachment.FileName}</a>
                            </div>
                        `;
                        $('#attachmentContent').html(attachmentHtml);
                        $('#attachmentModal').modal('show');
                    } else {
                        var noAttachmentHtml = `
                                <div class="d-flex align-items-center">
                                    <a title="Thêm đính kèm" onclick="openAddAttachmentModal(${taskId})" href="javascript:void(0)" class="btn bg-primary-light ml-2"><i class="bi bi-plus-circle"></i></a>
                                    <p class="mb-0 ml-2">Không có đính kèm nào</p>
                                </div>
                            `;
                        $('#attachmentContent').html(noAttachmentHtml);
                        $('#attachmentModal').modal('show');
                    }
                },
                error: function () {
                    showAlert('Có lỗi xảy ra khi tải đính kèm.', 'error');
                }
            });
        }
        function openEditAttachmentModal(taskId, IdAttachment,filename) {
            $('#editAttachmentModal').modal('show');
            $('#editAttachmentTaskId').val(taskId);
            $('#editIdAttachment').val(IdAttachment);
            $('#currentAttachment').val(filename);
          }

         $('#editAttachmentForm').submit(function (e) {
            e.preventDefault();
            var formData = new FormData(this);  
            var taskId = $('#editAttachmentTaskId').val();

            $.ajax({
                url: '/Task/EditAttachment', 
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    if (data.success) {

                        openAttachmentModal(taskId); 
                        
                        showAlert('Sửa đính kèm thành công', 'success');

                          $('#editAttachmentModal').modal('hide');

                          $('#newAttachment').val('');

                          $('#newAttachment').next('.custom-file-label').html('Chọn tệp');

                    } else {
                       showAlert(data.error || 'Không thể lưu đính kèm', 'error');
                    }
                },
                error: function () {
                   showAlert('Có lỗi xảy ra khi lưu đính kèm', 'error');
                }
            });
        });


        function openAddAttachmentModal(taskId) {
            $('#taskIdForNewAttachment').val(taskId);

            $('#addAttachmentModal').modal('show');
        }

        $('#addAttachmentForm').submit(function (e) {
            e.preventDefault();  

            var formData = new FormData(this);
            var taskId = $('#taskIdForNewAttachment').val();

            $.ajax({
                url: '/Task/AddAttachment', 
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    if (data.success) {
                        showAlert('Thêm đính kèm thành công', 'success');
                        openAttachmentModal(taskId); 
                        $('#addAttachmentModal').modal('hide');
                        $('#newAttachmentFile').val('');
                        $('#newAttachmentFile').next('.custom-file-label').html('Chọn tệp');
                    } else {
                        showAlert(data.error || 'Không thể thêm đính kèm', 'error');
                    }
                },
                error: function () {
                    showAlert('Có lỗi xảy ra khi thêm đính kèm', 'error');
                }
            });
        });

    
          function deleteAttachment(taskId, attachmentId) {
              Swal.fire({
                  title: 'Bạn chắc chắn muốn xoá đính kèm này?',
                  text: "Hành động này không thể hoàn tác!",
                  icon: 'warning',
                  showCancelButton: true,
                  confirmButtonColor: '#d33',
                  cancelButtonColor: '#3085d6',
                  confirmButtonText: 'Xóa',
                  cancelButtonText: 'Hủy'
              }).then((result) => {
                  if (result.isConfirmed) {
                      $.ajax({
                          url: '/Task/DeleteAttachment',
                          type: 'POST',
                          data: { taskId: taskId, attachmentId: attachmentId  },
                          success: function (res) {
                              if (res.success) {
                                    showAlert('Đã xoá đính kèm thành công', 'success');
                                    openAttachmentModal(taskId);
                                } else {
                                    showAlert(data.error || 'Có lỗi xảy ra khi xoá đính kèm', 'error');
                              }
                          },
                          error: function () {
                                  showAlert('Có lỗi xảy ra khi xoá đính kèm', 'error');
                          }
                      });
                  }
              });
          }

       $(document).on('click', '#btnClearSearch', function () {
             $('#searchtext').val('');
             $('#searchtext2').val('');
             doFilterTasks();
        });

    </script>

    <script>
        function doFilterTasks() {
            const text = $('#searchtext').val().trim();
            const text2 = $('#searchtext2').val().trim();
            const statusId = $('.status-option.active').data('id') || null;
            const projectId = $('.project-option.active').data('id') || null;


            let ptextsearch = '';
            if (window.innerWidth <= 576) {
                ptextsearch = text2;
            } else { 
                ptextsearch = text;
            }

            $.ajax({
                url: '/Task/FilterTask',
                type: 'GET',
                data: {
                    textsearch: ptextsearch,
                    IdStatus: statusId,
                    IdProject: projectId
                },
                success: function (html) {
                    $('#task-container').html(html);
                },
                error: function () {
                    showAlert('Lỗi khi lọc công việc.', 'error');
                }
            });
        }

        $(document).ready(function () {
            $('#Search').on('submit', function (e) {
                e.preventDefault();
                doFilterTasks();
            });
            $('#SearchMobile').on('submit', function (e) {
                e.preventDefault();
                doFilterTasks();
            });

            $('.status-option').click(function () {
                $('.status-option').removeClass('active');
                $(this).addClass('active');
                $('#selectedStatus').text($(this).text().trim());
                doFilterTasks();
            });

            $('.project-option').click(function () {
                $('.project-option').removeClass('active');
                $(this).addClass('active');
                $('#selectedProject').text($(this).data('name'));
                doFilterTasks();
            });
        });
    </script>
}
